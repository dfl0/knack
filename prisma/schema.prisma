generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String @unique
  hashedPassword String

  friendIds String[] @db.ObjectId

  outgoingFriendRequests FriendRequest[] @relation("outgoing")
  incomingFriendRequests FriendRequest[] @relation("incoming")

  chatIds String[] @db.ObjectId
  chats   Chat[]   @relation(fields: [chatIds], references: [id])

  messages       Message[]
  updatedChatIds String[] @db.ObjectId
}

model FriendRequest {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  sender   User   @relation("outgoing", fields: [senderId], references: [id])
  senderId String @db.ObjectId

  recipient   User   @relation("incoming", fields: [recipientId], references: [id])
  recipientId String @db.ObjectId

  @@unique(fields: [senderId, recipientId], name: "userIds")
}

model Chat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  isGroup   Boolean
  name      String?
  updatedAt DateTime @default(now())

  members   User[]   @relation(fields: [memberIds], references: [id])
  memberIds String[] @db.ObjectId

  messages   Message[]
  messageIds String[]  @db.ObjectId
}

model Message {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  body   String
  sentAt DateTime @default(now())

  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String @db.ObjectId

  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String @db.ObjectId
}
